<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>计算机编程基础s on Wing</title>
    <link>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/</link>
    <description>Recent content in 计算机编程基础s on Wing</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Tue, 09 Jun 2020 19:01:55 +0800</lastBuildDate>
    
	<atom:link href="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>浏览器工作过程</title>
      <link>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%A5%E4%BD%9C%E8%BF%87%E7%A8%8B/</link>
      <pubDate>Tue, 09 Jun 2020 19:01:55 +0800</pubDate>
      
      <guid>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%A5%E4%BD%9C%E8%BF%87%E7%A8%8B/</guid>
      <description>相似问题：
打开一个网址会发生什么？
浏览器是怎样工作的？
简述一次完整的 HTTP 请求过程
  First Of All：在浏览器地址栏输入 URL 并回车
 DNS 域名解析  搜索浏览器自身缓存的 DNS 记录  浏览器自身也带有一层 DNS 缓存。Chrome 缓存 1000 条 DNS 解析结果，缓存时间大概在一分钟左右。 （Chrome 浏览器通过输入：chrome://net-internals/#dns 打开 DNS 缓存页面） 搜索操作系统缓存和 hosts 文件  发生在浏览器缓存中没有找到需要的记录或记录已经过期的时候。 在 Windows 操作系统中，可以通过 `ipconfig /displaydns` 命令查看本机当前的缓存。 通过 hosts 文件，你可以手动指定一个域名和其对应的 IP 解析结果，并且该结果一旦被使用，同样会被缓存到操作系统缓存中。 Windows 系统的 hosts 文件在 `%systemroot%\system32\drivers\etc` 下，linux 系统的 hosts 文件在 `/etc/hosts` 下。 向域名解析服务器发送解析请求  发生在 hosts 文件和操作系统缓存中没有找到需要的记录或记录已经过期。 第一台被访问的域名解析服务器就是我们平时在设置中填写的 DNS 服务器一项。 一般一台域名解析服务器会被地理位置临近的大量用户使用（特别是 ISP 的 DNS），一般常见的网站域名解析都能在这里命中。 递归+迭代解析 DNS  发生在域名解析服务器也没有该域名的记录时。 从根域服务器（IPv4 只有 13 台）-&amp;gt; 得到 IP 地址，返回给浏览器  浏览器缓存 -&amp;gt; 浏览器 host 文件/本地缓存 -&amp;gt; 浏览器 域名解析服务器 -&amp;gt; 浏览器 （xxx.</description>
    </item>
    
    <item>
      <title>计算机字符编码详解</title>
      <link>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Mon, 28 Oct 2019 00:58:33 +0800</pubDate>
      
      <guid>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E8%AF%A6%E8%A7%A3/</guid>
      <description>程序员如果不弄懂字符编码它就会像幽灵一般纠缠你整个职业生涯，各种灵异事件会接踵而来，挥之不去。
&amp;mdash; 刘志军 [知乎]
 1 bit = 2 种两种可能性（0或1） 1 byte = 1 字节 = 8 bit = 2 ^ 8 次方 = 256 种可能性 字符编码简介 在计算机中，所有的数据在存储和运算时都要使用二进制数表示（因为计算机用高电平和低电平分别表示 1 和 0），而具体用哪些二进制数字表示哪个符号，当然每个人都可以约定自己的一套（这就叫编码规则）。
ASCII ASCII（American Standard Code for Information Interchange，美国信息交换标准代码）是一种单字节的编码方案，指定的 7 位或 8 位二进制数组合来表示 128 或 256 种可能的字符，主要用于显示现代英语。
MBCS MBCS（Muilti-Bytes Charecter Set，多字节字符集）使用两个字节来代表一个字符的各种汉字延伸编码方式，又称为 ANSI 编码。在简体中文系统下，ANSI 编码代表 GB2312 编码；日文操作系统下，ANSI 编码代表 Shift_JIS 编码；韩文操作系统下，ANSI 编码代表 Euc-kr 编码。不统一的编码标准会不可避免地出现冲突。
GBK 和 gb2312 见上
UCS Universal Character Set, UCS（中文：通用字符集）是由 ISO 制定的 ISO 10646（或称 ISO/IEC 10646）标准所定义的标准字符集。UCS-2：使用两个定长的字节来表示一个字符。UCS-4：是一个更大的尚未填充完全的 31 位字符集，加上恒为 0 的首位，共需占据 32 位，即四字节。理论上最多能表示 231 个字符，完全可以涵盖一切语言所用的符号。</description>
    </item>
    
  </channel>
</rss>